// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package periscope

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PeriscopeClient is the client API for Periscope service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PeriscopeClient interface {
	// Proxy a request _into_ the cluster.
	//
	// Proxies an HTTP request into the cluster.
	In(ctx context.Context, in *ProxyRequest, opts ...grpc.CallOption) (*ProxyResponse, error)
	// Proxy a request _out_ of the cluster.
	//
	// This works by having the outside proxy connect to the inner proxy,
	// and then sending one ProxyResponse for each ProxyRequest streamed
	// out from the cluster.
	Out(ctx context.Context, opts ...grpc.CallOption) (Periscope_OutClient, error)
}

type periscopeClient struct {
	cc grpc.ClientConnInterface
}

func NewPeriscopeClient(cc grpc.ClientConnInterface) PeriscopeClient {
	return &periscopeClient{cc}
}

func (c *periscopeClient) In(ctx context.Context, in *ProxyRequest, opts ...grpc.CallOption) (*ProxyResponse, error) {
	out := new(ProxyResponse)
	err := c.cc.Invoke(ctx, "/periscope.Periscope/In", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *periscopeClient) Out(ctx context.Context, opts ...grpc.CallOption) (Periscope_OutClient, error) {
	stream, err := c.cc.NewStream(ctx, &Periscope_ServiceDesc.Streams[0], "/periscope.Periscope/Out", opts...)
	if err != nil {
		return nil, err
	}
	x := &periscopeOutClient{stream}
	return x, nil
}

type Periscope_OutClient interface {
	Send(*ProxyResponse) error
	Recv() (*ProxyRequest, error)
	grpc.ClientStream
}

type periscopeOutClient struct {
	grpc.ClientStream
}

func (x *periscopeOutClient) Send(m *ProxyResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *periscopeOutClient) Recv() (*ProxyRequest, error) {
	m := new(ProxyRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PeriscopeServer is the server API for Periscope service.
// All implementations must embed UnimplementedPeriscopeServer
// for forward compatibility
type PeriscopeServer interface {
	// Proxy a request _into_ the cluster.
	//
	// Proxies an HTTP request into the cluster.
	In(context.Context, *ProxyRequest) (*ProxyResponse, error)
	// Proxy a request _out_ of the cluster.
	//
	// This works by having the outside proxy connect to the inner proxy,
	// and then sending one ProxyResponse for each ProxyRequest streamed
	// out from the cluster.
	Out(Periscope_OutServer) error
	mustEmbedUnimplementedPeriscopeServer()
}

// UnimplementedPeriscopeServer must be embedded to have forward compatible implementations.
type UnimplementedPeriscopeServer struct {
}

func (UnimplementedPeriscopeServer) In(context.Context, *ProxyRequest) (*ProxyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method In not implemented")
}
func (UnimplementedPeriscopeServer) Out(Periscope_OutServer) error {
	return status.Errorf(codes.Unimplemented, "method Out not implemented")
}
func (UnimplementedPeriscopeServer) mustEmbedUnimplementedPeriscopeServer() {}

// UnsafePeriscopeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PeriscopeServer will
// result in compilation errors.
type UnsafePeriscopeServer interface {
	mustEmbedUnimplementedPeriscopeServer()
}

func RegisterPeriscopeServer(s grpc.ServiceRegistrar, srv PeriscopeServer) {
	s.RegisterService(&Periscope_ServiceDesc, srv)
}

func _Periscope_In_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeriscopeServer).In(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/periscope.Periscope/In",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeriscopeServer).In(ctx, req.(*ProxyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Periscope_Out_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PeriscopeServer).Out(&periscopeOutServer{stream})
}

type Periscope_OutServer interface {
	Send(*ProxyRequest) error
	Recv() (*ProxyResponse, error)
	grpc.ServerStream
}

type periscopeOutServer struct {
	grpc.ServerStream
}

func (x *periscopeOutServer) Send(m *ProxyRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *periscopeOutServer) Recv() (*ProxyResponse, error) {
	m := new(ProxyResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Periscope_ServiceDesc is the grpc.ServiceDesc for Periscope service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Periscope_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "periscope.Periscope",
	HandlerType: (*PeriscopeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "In",
			Handler:    _Periscope_In_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Out",
			Handler:       _Periscope_Out_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "reverseproxy.proto",
}
